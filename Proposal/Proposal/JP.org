
#+TITLE: Towards a System-Level Functional Language

* Introduction

The goal of this thesis is to Design and implement a compiler for a
an intermediate language which combines the following aspects:
 1. it is suitable for system-level programming
 2. it is a functional language, in the sense that it is fully typed,
    higher-order and side-effect free.

** System-level programming
Wikipedia:
    - Programs can operate in resource-constrained environments
    - Programs can be efficient with little runtime overhead, possibly having either a small runtime library or none at all
    - Programs may use direct and "raw" control over memory access and control flow
    - The programmer may write parts of the program directly in assembly language

** Motivation (why is SLFL interesting)
  - Principle 1: most of the compiliation steps are done within a typed (logic-inspired) language

Compared to usual functional languages, a key advantage of such a
language is that the programmer will be able to precisely control the
low-level behaviour of programs.

- Parts of the program (perhaps just type annotations) can be written in SLFL for control, while most of the program can be written in the higher level language
    
** Pre-exisiting work in the literature
TODO [citations]
** Pre-exisiting work in the group
- previous work by nordmark
- stub design/compiler by supervisor

** Transition paragraph
- What is in the scope for this thesis, more precisely
  
* More features

- each feature will require some design work, so that it can be compiled following Principle 1
# for each : define what it is, and why we want it.
       - exponentials
       - records
       - recursive data types
       - laziness

* Compilation

- how it differs from previous work (Nordmark)
  - Nordmark has a special purpose VM.
  - using Nordmark's VM as an intermediate language goes against Principle 1.

- what to do?
  - Translate each construction/typing rule into code
  - if a construction cannot be translated this way: refine it (design
    a more low-level rule which serves in an intermediate compilation
    step.)